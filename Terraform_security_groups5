locals {
  input_yaml = yamldecode(file(var.input_yaml_file))

  group_map = {
    for group in local.input_yaml.sec_groups :
    group.display_name => group
  }

  # Helper function: wrap expressions if > 1
  group_expressions = {
    for group_name, group in local.group_map :
    group_name => (
      length(group.expression) > 1 ?
        [
          {
            resource_type        = "NestedExpression"
            expressions          = concat(
              flatten([group.expression]),
              [
                {
                  resource_type        = "ConjunctionOperator"
                  conjunction_operator = "OR"
                }
              ]
            )
          }
        ] :
        group.expression
    )
  }
}

resource "nsxt_policy_group" "sec_groups" {
  for_each     = local.group_map
  display_name = each.value.display_name
  domain       = "default"

  dynamic "expression" {
    for_each = local.group_expressions[each.key]
    content {
      resource_type = expression.value.resource_type

      # For PathExpression
      paths = contains(keys(expression.value), "paths") ? expression.value.paths : null

      # For IPAddressExpression
      ip_addresses = contains(keys(expression.value), "ip_addresses") ? expression.value.ip_addresses : null

      # For NestedExpression
      dynamic "expressions" {
        for_each = contains(keys(expression.value), "expressions") ? expression.value.expressions : []
        content {
          key               = lookup(expressions.value, "key", null)
          member_type       = lookup(expressions.value, "member_type", null)
          operator          = lookup(expressions.value, "operator", null)
          value             = lookup(expressions.value, "value", null)
          resource_type     = lookup(expressions.value, "resource_type", null)
          conjunction_operator = lookup(expressions.value, "conjunction_operator", null)
        }
      }
    }
  }
}
