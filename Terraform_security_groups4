locals {
  sec_groups = yamldecode(file("${path.module}/input_test_file.yaml.txt"))["sec_groups"]
}

resource "nsxt_policy_group" "group" {
  for_each     = {for sg in local.sec_groups : sg.display_name => sg}
  display_name = each.value.display_name
  description  = try(each.value.id, null)
  domain       = "default"

  dynamic "criteria" {
    # Flatten and filter non-null expressions by type
    for_each = [
      for expr in each.value.expression : expr
      if contains(
        ["NestedExpression", "Condition", "IPAddressExpression", "PathExpression"],
        try(expr.resource_type, "")
      )
    ]

    content {
      dynamic "condition" {
        for_each = criteria.value.resource_type == "NestedExpression" ? [
          for c in criteria.value.expressions : c if c.resource_type == "Condition"
        ] : criteria.value.resource_type == "Condition" ? [criteria.value] : []

        content {
          key         = condition.value.key
          member_type = condition.value.member_type
          operator    = condition.value.operator
          value       = condition.value.value
        }
      }

      dynamic "ipaddress_expression" {
        for_each = criteria.value.resource_type == "IPAddressExpression" ? [criteria.value] : []
        content {
          ip_addresses = ipaddress_expression.value.ip_addresses
        }
      }

      dynamic "path_expression" {
        for_each = criteria.value.resource_type == "PathExpression" ? [criteria.value] : []
        content {
          member_paths = path_expression.value.paths
        }
      }
    }
  }
}
