locals {
  sec_groups = yamldecode(file("${path.module}/input_test_file.yaml.txt"))["sec_groups"]
}

resource "nsxt_policy_group" "group" {
  for_each     = { for sg in local.sec_groups : sg.display_name => sg }
  display_name = each.value.display_name
  description  = try(each.value.id, null)
  domain       = "default"

  dynamic "criteria" {
    for_each = flatten([
      for expr in each.value.expression : [
        expr.resource_type == "NestedExpression" ? expr : null,
        expr.resource_type == "Condition" ? expr : null,
        expr.resource_type == "IPAddressExpression" ? expr : null,
        expr.resource_type == "PathExpression" ? expr : null,
      ]
    ])

    # Filter out nulls because flatten creates a list with nulls too
    for_each = [for c in criteria.value != null ? [criteria.value] : []][0]

    content {
      dynamic "condition" {
        for_each = (
          criteria.value.resource_type == "NestedExpression" && criteria.value.expressions != null
        ) ? [
          for cond in criteria.value.expressions : cond if cond.resource_type == "Condition"
        ] : []

        content {
          key         = condition.value.key
          member_type = condition.value.member_type
          operator    = condition.value.operator
          value       = condition.value.value
        }
      }

      dynamic "condition" {
        for_each = criteria.value.resource_type == "Condition" ? [criteria.value] : []
        content {
          key         = condition.value.key
          member_type = condition.value.member_type
          operator    = condition.value.operator
          value       = condition.value.value
        }
      }

      dynamic "ipaddress_expression" {
        for_each = criteria.value.resource_type == "IPAddressExpression" ? [criteria.value] : []
        content {
          ip_addresses = criteria.value.ip_addresses
        }
      }

      dynamic "path_expression" {
        for_each = criteria.value.resource_type == "PathExpression" ? [criteria.value] : []
        content {
          member_paths = criteria.value.paths
        }
      }
    }
  }
}
